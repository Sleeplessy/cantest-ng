CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
PROJECT(ccel)
IF(${TARGET} MATCHES "^arm*")
  SET(CMAKE_SYSTEM_PROCESSOR arm)
  SET(CMAKE_FIND_ROOT_PATH  "/home/sleeplessy/x-tools/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a -static-libgcc -static-libstdc++")
# search for programs in the build host directories
  SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
  SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
ENDIF()
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wall")
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_STATIC_RUNTIME ON)
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/lib/rang/include")
AUX_SOURCE_DIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/src" CANTESTNG_SRC)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
SET(LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/lib/ccel")
ADD_EXECUTABLE(canserver "src/canserver.cc")
ADD_EXECUTABLE(canclient "src/canclient.cc")
TARGET_LINK_LIBRARIES(canserver ccel_canbus Boost::system)
TARGET_LINK_LIBRARIES(canclient ccel_canbus Boost::system)
